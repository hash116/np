Server Side:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <netinet/in.h>

#define PORT 8080

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    socklen_t addrlen = sizeof(address);

    int nums[3];      // to receive three numbers
    int results[3];   // sum, difference, product

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Define address
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d...\n", PORT);

    // Accept
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, &addrlen)) < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    // Read 3 integers from client
    int bytes_read = read(new_socket, nums, sizeof(nums));
    if (bytes_read != sizeof(nums)) {
        perror("Failed to read all 3 integers");
        exit(EXIT_FAILURE);
    }

    // Calculate
    results[0] = nums[0] + nums[1] + nums[2];
    results[1] = nums[0] - nums[1] - nums[2];
    results[2] = nums[0] * nums[1] * nums[2];

    // Send result back
    write(new_socket, results, sizeof(results));

    close(new_socket);
    close(server_fd);

    return 0;
}

Client Side:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 8080

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    int nums[3];
    int results[3];

    printf("Enter three integers: ");
    scanf("%d %d %d", &nums[0], &nums[1], &nums[2]);

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 address from text to binary
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("Invalid address / Address not supported");
        return -1;
    }

    // Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection Failed");
        return -1;
    }

    // Send 3 integers
    send(sock, nums, sizeof(nums), 0);

    // Receive result
    read(sock, results, sizeof(results));

    // Display result
    printf("Sum: %d\n", results[0]);
    printf("Difference: %d\n", results[1]);
    printf("Product: %d\n", results[2]);

    close(sock);

    return 0;
}
